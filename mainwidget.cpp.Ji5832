#include "mainwidget.h"
#include "ui_mainwidget.h"

MainWidget::MainWidget(Base *parent) :
    Base(parent),
    ui(new Ui::MainWidget),
    rowCount(0)
{
    ui->setupUi(this);
    configWindow(); //配置窗口
    initialize(); //初始化
}

void MainWidget::initialize()
{
    idManager = new IDManager();
    serverManager = new ServerManager();
    aliasManager = new AliasManager();

    //设置UDP服务器
    udpSocket = new QUdpSocket();
    udpSocket->bind(23333,QAbstractSocket::ShareAddress);
    connect(udpSocket,SIGNAL(readyRead()),this,SLOT(readPendingDatagrams()));

    //初始化表格
    model = new QStandardItemModel();
    model->setColumnCount(4);
    model->setHeaderData(0,Qt::Horizontal,"本机IP");
    model->setHeaderData(1,Qt::Horizontal,"本机ID");
    model->setHeaderData(2,Qt::Horizontal,"别名列表");
    model->setHeaderData(3,Qt::Horizontal,"浏览");
    ui->tvServerTable->setModel(model);
    ui->tvServerTable->setColumnWidth(3,40);
}

MainWidget::~MainWidget()
{
    delete ui;
    delete idManager;
    delete serverManager;
    delete aliasManager;
    delete udpSocket;
    delete model;
}

void MainWidget::on_pbIDManager_clicked()
{
    idManager->show();
}


void MainWidget::on_pbServerManager_clicked()
{
    serverManager->show();
}

void MainWidget::on_pbAliasManager_clicked()
{
    aliasManager->show();
}
/**
 * @brief MainWidget::readPendingDatagrams 根据收到的信息，更新在线服务器列表；发送自己的ID和别名列表
 */
void MainWidget::readPendingDatagrams(){

    while(udpSocket->hasPendingDatagrams())
    {
        QByteArray bytes;
        bytes.resize(udpSocket->pendingDatagramSize());
        QHostAddress sender;
        quint16 senderPort;
        udpSocket->readDatagram(bytes.data(),bytes.size(),&sender,&senderPort);
        QString str = QString::fromUtf8(bytes);
        QHostAddress host(QHostAddress(sender.toIPv4Address()));
        QStringList list = str.split(":");
        #ifdef DEBUG
            mDebug(str+" "+host.toString());
        #endif
        if(str=="FIND"){ //广播信息
            //返回本机ID和别名列表
            if(serverManager->isSearchable()){//如果本机可被搜索
                //向sender发送本机ID和别名列表
                QString id = idManager->getServerID();
                QString alias = aliasManager->getAliasList();
#ifdef DEBUG
                mDebug(id + alias);
#endif
                if((!id.isEmpty()) && (!alias.isEmpty()))
                {
                    //发送数据
                    QByteArray bytes = ("HELLO:"+id+":"+alias).toUtf8();
                    udpSocket->writeDatagram(bytes,host,23333);
                }
            }
        }
        else if(list.first()=="SEARCH"){ //搜索主机
            if(idManager->hasIP(list.at(1)) || idManager->hasID(list.at(1))){
                if(serverManager->isSearchable()){//如果本机可被搜索
                    //向sender发送本机ID和别名列表
                    QString id = idManager->getServerID();
                    QString alias = aliasManager->getAliasList();
                    if((!id.isEmpty()) && (!alias.isEmpty()))
                    {
                        //发送数据
                        QByteArray bytes = ("HELLO:"+id+":"+alias).toUtf8();
                        udpSocket->writeDatagram(bytes,host,23333);
                    }
                }
            }
        }
        else if(list.first()=="HELLO"){//收到主机信息
            //判断该IP是否在表中已存在，如已存在，更新其信息
            QModelIndex index = model->indexFromItem(new QStandardItem(host.toString()));
            if(index.isValid())
            {
                //更新在线服务器列表
                int rowIndex = index.row();
                #ifdef DEBUG
                    mDebug(rowIndex);
                #endif
                model->setItem(rowIndex,0,new QStandardItem(host.toString()));
                model->setItem(rowIndex,1,new QStandardItem(list.at(1)));
                model->setItem(rowIndex,2,new QStandardItem(list.at(2)));
            }
            else{
                //新增在线服务器列表
                model->setItem(rowCount,0,new QStandardItem(host.toString()));
                model->setItem(rowCount,1,new QStandardItem(list.at(1)));
                model->setItem(rowCount,2,new QStandardItem(list.at(2)));
                model->setItem(rowCount,3,new QStandardItem("浏览"));
                rowCount++;
            }
        }
    }
}


void MainWidget::on_pbSearch_clicked()
{
    model->removeRows(0,model->rowCount());
    rowCount = 0;
    QString key = ui->leSearch->text();
    if(!key.isEmpty()){
        QByteArray bytes = ("SEARCH:"+key).toUtf8();
        QHostAddress host("255.255.255.255");
        udpSocket->writeDatagram(bytes,host,23333);
    }
}

void MainWidget::on_pbRefresh_clicked()
{
    model->removeRows(0,model->rowCount());
    rowCount = 0;
    QByteArray bytes("FIND");
    QHostAddress host("255.255.255.255");
    udpSocket->writeDatagram(bytes,host,23333);
}


void MainWidget::on_tvServerTable_clicked(const QModelIndex &index)
{
    #ifdef DEBUG
        mDebug(index.isValid());
        mDebug(index.row());
        mDebug(index.column());
        mDebug(index.data().toString());
    #endif
    if(index.column()==3){//“浏览”那一列被点击
        //打开浏览UI
        QString ip = model->index(index.row(),0).data().toString();
        QString alias = model->index(index.row(),2).data().toString();
        BrowseManager *browseManager = new BrowseManager(ip,alias);
        browseManager->show();
        //browseManager->deleteLater();
    }
}
